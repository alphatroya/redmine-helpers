#!/usr/bin/env bash

main() {
    project_id=""
    status_id=""
    next_status_id=""
    assignee=""
    build_number=""

    while getopts ":p:s:n:a:b:" opt; do
        case $opt in
            p ) project_id=$OPTARG ;;
            s ) status_id=$OPTARG ;;
            n ) next_status_id=$OPTARG ;;
            a ) assignee=$OPTARG ;;
            b ) build_number=$OPTARG ;;
            \? ) print_usage ;;
            :)
            echo "Option -$OPTARG requires an argument."
            exit 1
            ;;
        esac
    done

    (
        [[ -z "$project_id" ]] ||
        [[ -z "$status_id" ]] ||
        [[ -z "$next_status_id" ]] ||
        [[ -z "$assignee" ]] ||
        [[ -z "$build_number" ]]
    ) &&
    print_usage

    issues=$(http GET "$REDMINE_HOST/issues.json" project_id==$project_id status_id==$status_id "X-Redmine-API-Key":"$REDMINE_API_KEY" | jq '.issues | map(.id) | .[]')
    IFS='
    '
    readarray -t lines <<< "$issues"

    for issue_id in "${lines[@]}"
    do
        if [[ -z $issue_id ]]; then
            continue
        fi
        echo "{ \"issue\": { \"assigned_to_id\": $assignee, \"status_id\": $next_status_id, \"custom_fields\": [{\"id\": 32, \"value\": \"$build_number\" }] }}" |
            http PUT "$REDMINE_HOST/issues/$issue_id.json" "X-Redmine-API-Key":"$REDMINE_API_KEY" >/dev/null
        echo "Update issue #$issue_id"
    done
}

print_usage() {
    echo "Usage: $0 -p <project_id> -s <status_id> -n <next_status_id> -a <assignee> -b <build_number>"
    exit 1
}

.  redmine-check
check_env
main "$@"
