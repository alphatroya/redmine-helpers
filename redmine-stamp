#!/usr/bin/env bash

main() {
    project_id=""
    status_id=""
    next_status_id=""
    build_number=""

    while getopts ":p:s:n:b:" opt; do
        case $opt in
            p ) project_id=$OPTARG ;;
            s ) status_id=$OPTARG ;;
            n ) next_status_id=$OPTARG ;;
            b ) build_number=$OPTARG ;;
            \? ) print_usage ;;
            :)
            echo "Option -$OPTARG requires an argument."
            exit 1
            ;;
        esac
    done

    {
        [[ -z "$project_id" ]] ||
        [[ -z "$status_id" ]] ||
        [[ -z "$next_status_id" ]] ||
        [[ -z "$build_number" ]]
    } &&
    print_usage

    issues=$(curl -s \
        -H "X-Redmine-API-Key: $REDMINE_API_KEY" \
        -H 'Content-Type: application/json' \
        "$REDMINE_HOST/issues.json?project_id=$project_id&status_id=$status_id" | jq '.issues | map(.id) | .[]'
    )

    IFS='
    '
    readarray -t lines <<< "$issues"

    for issue_id in "${lines[@]}"
    do
        if [[ -z $issue_id ]]; then
            continue
        fi
        assignee=$(curl -s -H "X-Redmine-API-Key: $REDMINE_API_KEY" "$REDMINE_HOST/issues/$issue_id.json" | jq '.issue.author.id')
        curl -s -X PUT \
            -H "X-Redmine-API-Key: $REDMINE_API_KEY" \
            -H 'Content-Type: application/json' \
            -d "{ \"issue\": { \"assigned_to_id\": $assignee, \"status_id\": $next_status_id, \"custom_fields\": [{\"id\": 32, \"value\": \"$build_number\" }] }}" \
            "$REDMINE_HOST/issues/$issue_id.json"
        echo "Updated issue with #$issue_id âœ…"
    done
}

print_usage() {
    echo "Usage: $0 -p <project_id> -s <status_id> -n <next_status_id> -b <build_number>"
    exit 1
}

.  redmine-check
check_env
main "$@"
